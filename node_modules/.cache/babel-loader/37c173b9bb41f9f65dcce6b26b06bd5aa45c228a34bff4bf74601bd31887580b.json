{"ast":null,"code":"var _jsxFileName = \"/home/cornel/client/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\nimport DateTimePicker from 'react-datetime-picker';\nimport { useState, useEffect } from 'react';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-clock/dist/Clock.css';\nimport 'react-datetime-picker/dist/DateTimePicker.css';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [start, setStart] = useState(new Date());\n  const [end, setEnd] = useState(new Date());\n  const [eventName, setEventName] = useState(\"\");\n  const [attendee, setAttendee] = useState(\"\");\n  const [eventDescription, setEventDescription] = useState(\"\");\n  const [events, setEvents] = useState([]);\n  const [isCreating, setIsCreating] = useState(false);\n  const [editingEvent, setEditingEvent] = useState(null);\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const {\n    isLoading\n  } = useSessionContext();\n  const [attendeeEmails, setAttendeeEmails] = useState(\"\"); // State pentru participantii prin email\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      if (session) {\n        const response1 = await fetch(`http://127.0.0.1:5000/get_user_id?email=${session.user.email}`);\n        const responseData = await response1.json();\n        const response = await fetch(`http://127.0.0.1:5000/events/${responseData.id}`);\n        const data = await response.json();\n        setEvents(data);\n      }\n    };\n    fetchEvents();\n  }, [session]);\n  const [isUserCreated, setIsUserCreated] = useState(false);\n  useEffect(() => {\n    // Verificăm dacă utilizatorul este autentificat și nu a fost creat deja\n    const createUserIfNeeded = async () => {\n      if (session && !isUserCreated) {\n        const response = await fetch('http://127.0.0.1:5000/create_user', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: session.user.email\n          }) // Trimitem email-ul utilizatorului\n        });\n        const data = await response.json();\n        if (response.ok) {\n          if (data.message === 'User created successfully!') {\n            console.log('User created successfully!');\n            setIsUserCreated(true); // Setăm că utilizatorul a fost creat\n          } else if (data.message === 'User already exists') {\n            console.log('User already exists!');\n          }\n        } else {\n          console.error('Failed to create user on backend', data);\n        }\n      }\n    };\n    createUserIfNeeded();\n  }, [session, isUserCreated]);\n\n  // async function createCalendarEvent() {\n  //   const event = {\n  //     'summary' : eventName,\n  //     'description' : eventDescription,\n  //     'start' : {\n  //       'dateTime' : start.toISOString(),\n  //       'timeZone' : Intl.DateTimeFormat().resolvedOptions().timeZone\n  //     },\n  //     'end' : {\n  //       'dateTime' : end.toISOString(),\n  //       'timeZone' : Intl.DateTimeFormat().resolvedOptions().timeZone\n  //     }\n  //   }\n  //   await fetch(\"https://www.googleapis.com/calendar/v3/calendars/primary/events\", {\n  //     method : \"POST\",\n  //     headers : {\n  //       'Authorization' : 'Bearer ' + session.provider_token\n  //     },\n  //     body : JSON.stringify(event)\n  //   }). then((data) => {\n  //     return data.json();\n  //   }).then((data) => {\n  //     console.log(data);\n  //     alert(\"Event created\")\n  //   })\n  // }\n\n  async function createCalendarEvent() {\n    const event = {\n      summary: eventName,\n      description: eventDescription,\n      start: {\n        dateTime: start.toISOString(),\n        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n      },\n      end: {\n        dateTime: end.toISOString(),\n        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n      }\n    };\n    const response = await fetch(\"https://www.googleapis.com/calendar/v3/calendars/primary/events\", {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Bearer ' + session.provider_token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(event)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      console.log(data.id);\n      alert(\"Event created in Google Calendar\");\n      return data.id; // <- ID-ul din Google Calendar\n    } else {\n      console.error(data);\n      throw new Error(\"Failed to create Google Calendar event\");\n    }\n  }\n  const createEvent = async () => {\n    // Construiește obiectul evenimentului\n    try {\n      const google_event_id = await createCalendarEvent();\n    } catch (calendarError) {\n      console.error(\"Failed to sync with Google Calendar:\", calendarError);\n    }\n    const event = {\n      title: eventName,\n      description: eventDescription,\n      start_time: start.toISOString(),\n      // Asigură-te că start este un obiect Date\n      end_time: end.toISOString(),\n      // Asigură-te că end este un obiect Date\n      attendees: attendeeEmails.split(',').map(email => email.trim()),\n      // Listează attendee-urile\n      google_event_id: google_event_id\n    };\n    try {\n      // Obține ID-ul organizer-ului pe baza email-ului\n      const response = await fetch(`http://127.0.0.1:5000/get_user_id?email=${session.user.email}`);\n      const responseData = await response.json();\n      if (!response.ok) {\n        throw new Error('Failed to fetch organizer ID');\n      }\n\n      // Asigură-te că răspunsul conține ID-ul utilizatorului\n      if (responseData.id) {\n        event.organizer_id = responseData.id; // Adaugă organizer_id în obiectul evenimentului\n      } else {\n        throw new Error('User not found');\n      }\n\n      // Trimite cererea POST către backend pentru a crea evenimentul\n      const createResponse = await fetch('http://127.0.0.1:5000/events', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json' // Indică faptul că trimitem JSON\n        },\n        body: JSON.stringify(event) // Transformă obiectul JavaScript într-un JSON string\n      });\n      const data = await createResponse.json(); // Obține răspunsul ca JSON\n\n      if (createResponse.ok) {\n        // Adaugă evenimentul nou la lista de evenimente\n        setEvents([...events, {\n          ...event,\n          id: data.event_id\n        }]);\n        setIsCreating(false);\n        resetForm();\n      } else {\n        console.error('Error creating event:', data);\n        alert('Error creating event');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert('Error creating event');\n    }\n  };\n  const deleteEvent = async eventId => {\n    try {\n      // Obține ID-ul utilizatorului curent\n      const response = await fetch(`http://127.0.0.1:5000/get_user_id?email=${session.user.email}`);\n      const data = await response.json();\n      if (!response.ok || !data.id) {\n        throw new Error(\"Could not fetch user ID\");\n      }\n\n      // Apelează backend-ul pentru a șterge evenimentul\n      const deleteResponse = await fetch(`http://127.0.0.1:5000/events/${eventId}?organizer_id=${data.id}`, {\n        method: 'DELETE'\n      });\n      if (deleteResponse.ok) {\n        // Șterge evenimentul local din listă\n        setEvents(events.filter(event => event.id !== eventId));\n      } else {\n        const errorData = await deleteResponse.json();\n        alert(`Error deleting event: ${errorData.error || 'Unknown error'}`);\n      }\n    } catch (err) {\n      console.error(\"Delete failed:\", err);\n      alert(\"Failed to delete event\");\n    }\n  };\n  const editEvent = event => {\n    setEditingEvent(event);\n    setStart(new Date(event.start_time));\n    setEnd(new Date(event.end_time));\n    setEventName(event.title);\n    setEventDescription(event.description);\n    setAttendeeEmails(event.attendees ? event.attendees.join(\", \") : \"\");\n    setIsCreating(true);\n  };\n  const updateEvent = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/get_user_id?email=${session.user.email}`);\n      const userData = await response.json();\n      if (!response.ok || !userData.id) {\n        throw new Error(\"Could not fetch user ID\");\n      }\n      const updatedEvent = {\n        organizer_id: userData.id,\n        title: eventName,\n        description: eventDescription,\n        start_time: start.toISOString(),\n        end_time: end.toISOString(),\n        attendees: attendeeEmails.split(',').map(email => email.trim())\n      };\n      const putResponse = await fetch(`http://127.0.0.1:5000/events/${editingEvent.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedEvent)\n      });\n      const data = await putResponse.json();\n      if (putResponse.ok) {\n        // Actualizăm lista de evenimente în UI\n        setEvents(events.map(event => event.id === editingEvent.id ? {\n          ...editingEvent,\n          ...updatedEvent\n        } : event));\n        setEditingEvent(null);\n        setIsCreating(false);\n        resetForm();\n      } else {\n        alert(`Error updating event: ${data.error || 'Unknown error'}`);\n      }\n    } catch (err) {\n      console.error(\"Update failed:\", err);\n      alert(\"Failed to update event\");\n    }\n  };\n  const sortEvents = sortBy => {\n    const sortedEvents = [...events].sort((a, b) => {\n      if (sortBy === 'name') {\n        return a.title.localeCompare(b.title);\n      } else if (sortBy === 'date') {\n        return new Date(a.start_time) - new Date(b.start_timea);\n      }\n      return 0;\n    });\n    setEvents(sortedEvents);\n  };\n  const resetForm = () => {\n    setStart(new Date());\n    setEnd(new Date());\n    setEventName('');\n    setEventDescription('');\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: session ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: session.user.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"events-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Upcoming Events\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"events-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => sortEvents('name'),\n              children: \"Sort by Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => sortEvents('date'),\n              children: \"Sort by Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                setEditingEvent(null); // 🛠 ieșim din modul de editare\n                resetForm(); // 🧼 resetăm datele din formular\n                setIsCreating(true); // 🆕 activăm formularul\n              },\n              children: \"Create Event\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"event-list\",\n            children: events.map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"event-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: event.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: event.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [new Date(event.start_time).toLocaleString(), \" - \", new Date(event.end_time).toLocaleString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => editEvent(event),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => deleteEvent(event.id),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 21\n              }, this)]\n            }, event.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this), isCreating && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"create-event-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: editingEvent ? \"Edit Event\" : \"Create Event\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Start of your event\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(DateTimePicker, {\n            onChange: setStart,\n            value: start\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"End of your event\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(DateTimePicker, {\n            onChange: setEnd,\n            value: end\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Event name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: eventName,\n            onChange: e => setEventName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Event Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: eventDescription,\n            onChange: e => setEventDescription(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Attendees (separate emails with commas)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: attendeeEmails,\n            onChange: e => setAttendeeEmails(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: editingEvent ? updateEvent : createEvent,\n            children: editingEvent ? \"Update\" : \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setIsCreating(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: signOut,\n          children: \"Sign Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Welcome!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please sign in with Google to continue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: googleSignIn,\n          children: \"Sign In with Google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 5\n  }, this);\n  async function googleSignIn() {\n    const {\n      error\n    } = await supabase.auth.signInWithOAuth({\n      provider: 'google',\n      options: {\n        scopes: 'https://www.googleapis.com/auth/calendar'\n      }\n    });\n    if (error) {\n      alert('Error logging into Google');\n      console.log(error);\n    }\n  }\n  async function signOut() {\n    await supabase.auth.signOut();\n  }\n}\n_s(App, \"Gc/HzqXJ0Fz3+OWUcxIH4bOTYIg=\", false, function () {\n  return [useSession, useSupabaseClient, useSessionContext];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useSession","useSupabaseClient","useSessionContext","DateTimePicker","useState","useEffect","Fragment","_Fragment","jsxDEV","_jsxDEV","App","_s","start","setStart","Date","end","setEnd","eventName","setEventName","attendee","setAttendee","eventDescription","setEventDescription","events","setEvents","isCreating","setIsCreating","editingEvent","setEditingEvent","session","supabase","isLoading","attendeeEmails","setAttendeeEmails","fetchEvents","response1","fetch","user","email","responseData","json","response","id","data","isUserCreated","setIsUserCreated","createUserIfNeeded","method","headers","body","JSON","stringify","ok","message","console","log","error","createCalendarEvent","event","summary","description","dateTime","toISOString","timeZone","Intl","DateTimeFormat","resolvedOptions","provider_token","alert","Error","createEvent","google_event_id","calendarError","title","start_time","end_time","attendees","split","map","trim","organizer_id","createResponse","event_id","resetForm","deleteEvent","eventId","deleteResponse","filter","errorData","err","editEvent","join","updateEvent","userData","updatedEvent","putResponse","sortEvents","sortBy","sortedEvents","sort","a","b","localeCompare","start_timea","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","name","toLocaleString","onChange","value","type","e","target","signOut","googleSignIn","auth","signInWithOAuth","provider","options","scopes","_c","$RefreshReg$"],"sources":["/home/cornel/client/src/App.js"],"sourcesContent":["import './App.css';\nimport { useSession, useSupabaseClient, useSessionContext } from '@supabase/auth-helpers-react';\nimport DateTimePicker from 'react-datetime-picker';\nimport { useState, useEffect } from 'react';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-clock/dist/Clock.css';\nimport 'react-datetime-picker/dist/DateTimePicker.css';\n\nfunction App() {\n  const [start, setStart] = useState(new Date());\n  const [end, setEnd] = useState(new Date());\n  const [eventName, setEventName] = useState(\"\");\n  const [attendee, setAttendee] = useState(\"\");\n  const [eventDescription, setEventDescription] = useState(\"\");\n  const [events, setEvents] = useState([]);\n  const [isCreating, setIsCreating] = useState(false);\n  const [editingEvent, setEditingEvent] = useState(null);\n\n  const session = useSession();\n  const supabase = useSupabaseClient();\n  const { isLoading } = useSessionContext();\n\n  const [attendeeEmails, setAttendeeEmails] = useState(\"\");  // State pentru participantii prin email\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      if (session) {\n        const response1 = await fetch(`http://127.0.0.1:5000/get_user_id?email=${session.user.email}`);\n        const responseData = await response1.json();\n        const response = await fetch(`http://127.0.0.1:5000/events/${responseData.id}`);\n        const data = await response.json();\n        setEvents(data);\n      }\n    };\n\n    fetchEvents();\n  }, [session]);\n\n\n  const [isUserCreated, setIsUserCreated] = useState(false);\n  useEffect(() => {\n    // Verificăm dacă utilizatorul este autentificat și nu a fost creat deja\n    const createUserIfNeeded = async () => {\n      if (session && !isUserCreated) {\n        const response = await fetch('http://127.0.0.1:5000/create_user', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ email: session.user.email }),  // Trimitem email-ul utilizatorului\n        });\n\n        const data = await response.json();\n\n        if (response.ok) {\n          if (data.message === 'User created successfully!') {\n            console.log('User created successfully!');\n            setIsUserCreated(true); // Setăm că utilizatorul a fost creat\n          } else if (data.message === 'User already exists') {\n            console.log('User already exists!');\n          }\n        } else {\n          console.error('Failed to create user on backend', data);\n        }\n      }\n    };\n\n    createUserIfNeeded();\n  }, [session, isUserCreated]);\n\n  // async function createCalendarEvent() {\n  //   const event = {\n  //     'summary' : eventName,\n  //     'description' : eventDescription,\n  //     'start' : {\n  //       'dateTime' : start.toISOString(),\n  //       'timeZone' : Intl.DateTimeFormat().resolvedOptions().timeZone\n  //     },\n  //     'end' : {\n  //       'dateTime' : end.toISOString(),\n  //       'timeZone' : Intl.DateTimeFormat().resolvedOptions().timeZone\n  //     }\n  //   }\n  //   await fetch(\"https://www.googleapis.com/calendar/v3/calendars/primary/events\", {\n  //     method : \"POST\",\n  //     headers : {\n  //       'Authorization' : 'Bearer ' + session.provider_token\n  //     },\n  //     body : JSON.stringify(event)\n  //   }). then((data) => {\n  //     return data.json();\n  //   }).then((data) => {\n  //     console.log(data);\n  //     alert(\"Event created\")\n  //   })\n  // }\n\n  async function createCalendarEvent() {\n  const event = {\n    summary: eventName,\n    description: eventDescription,\n    start: {\n      dateTime: start.toISOString(),\n      timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n    },\n    end: {\n      dateTime: end.toISOString(),\n      timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n    }\n  };\n\n  const response = await fetch(\"https://www.googleapis.com/calendar/v3/calendars/primary/events\", {\n    method: \"POST\",\n    headers: {\n      'Authorization': 'Bearer ' + session.provider_token,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(event)\n  });\n\n  const data = await response.json();\n\n  if (response.ok) {\n    console.log(data.id)\n    alert(\"Event created in Google Calendar\");\n    return data.id; // <- ID-ul din Google Calendar\n  } else {\n    console.error(data);\n    throw new Error(\"Failed to create Google Calendar event\");\n  }\n}\n\n\n  const createEvent = async () => {\n    // Construiește obiectul evenimentului\n    try {\n      const google_event_id = await createCalendarEvent();\n    } catch (calendarError) {\n      console.error(\"Failed to sync with Google Calendar:\", calendarError);\n    }\n\n\n    const event = {\n      title: eventName,\n      description: eventDescription,\n      start_time: start.toISOString(),  // Asigură-te că start este un obiect Date\n      end_time: end.toISOString(),      // Asigură-te că end este un obiect Date\n      attendees: attendeeEmails.split(',').map(email => email.trim()),  // Listează attendee-urile\n      google_event_id : google_event_id\n    };\n  \n    try {\n      // Obține ID-ul organizer-ului pe baza email-ului\n      const response = await fetch(`http://127.0.0.1:5000/get_user_id?email=${session.user.email}`);\n      const responseData = await response.json();\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch organizer ID');\n      }\n  \n      // Asigură-te că răspunsul conține ID-ul utilizatorului\n      if (responseData.id) {\n        event.organizer_id = responseData.id;  // Adaugă organizer_id în obiectul evenimentului\n      } else {\n        throw new Error('User not found');\n      }\n  \n      // Trimite cererea POST către backend pentru a crea evenimentul\n      const createResponse = await fetch('http://127.0.0.1:5000/events', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',  // Indică faptul că trimitem JSON\n        },\n        body: JSON.stringify(event),  // Transformă obiectul JavaScript într-un JSON string\n      });\n  \n      const data = await createResponse.json();  // Obține răspunsul ca JSON\n  \n      if (createResponse.ok) {\n        // Adaugă evenimentul nou la lista de evenimente\n        setEvents([...events, { ...event, id: data.event_id }]);\n        setIsCreating(false);\n        resetForm();\n\n      } else {\n        console.error('Error creating event:', data);\n        alert('Error creating event');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert('Error creating event');\n    }\n  };\n  \n\n  const deleteEvent = async (eventId) => {\n    try {\n      // Obține ID-ul utilizatorului curent\n      const response = await fetch(`http://127.0.0.1:5000/get_user_id?email=${session.user.email}`);\n      const data = await response.json();\n  \n      if (!response.ok || !data.id) {\n        throw new Error(\"Could not fetch user ID\");\n      }\n  \n      // Apelează backend-ul pentru a șterge evenimentul\n      const deleteResponse = await fetch(`http://127.0.0.1:5000/events/${eventId}?organizer_id=${data.id}`, {\n        method: 'DELETE',\n      });\n  \n      if (deleteResponse.ok) {\n        // Șterge evenimentul local din listă\n        setEvents(events.filter((event) => event.id !== eventId));\n      } else {\n        const errorData = await deleteResponse.json();\n        alert(`Error deleting event: ${errorData.error || 'Unknown error'}`);\n      }\n    } catch (err) {\n      console.error(\"Delete failed:\", err);\n      alert(\"Failed to delete event\");\n    }\n  };\n  \n\n\n  const editEvent = (event) => {\n    setEditingEvent(event);\n    setStart(new Date(event.start_time));\n    setEnd(new Date(event.end_time));\n    setEventName(event.title);\n    setEventDescription(event.description);\n    setAttendeeEmails(event.attendees ? event.attendees.join(\", \") : \"\");\n    setIsCreating(true);\n  };\n  \n\n  const updateEvent = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/get_user_id?email=${session.user.email}`);\n      const userData = await response.json();\n  \n      if (!response.ok || !userData.id) {\n        throw new Error(\"Could not fetch user ID\");\n      }\n  \n      const updatedEvent = {\n        organizer_id: userData.id,\n        title: eventName,\n        description: eventDescription,\n        start_time: start.toISOString(),\n        end_time: end.toISOString(),\n        attendees: attendeeEmails.split(',').map(email => email.trim())\n      };\n  \n      const putResponse = await fetch(`http://127.0.0.1:5000/events/${editingEvent.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedEvent),\n      });\n  \n      const data = await putResponse.json();\n  \n      if (putResponse.ok) {\n        // Actualizăm lista de evenimente în UI\n        setEvents(events.map(event =>\n          event.id === editingEvent.id ? { ...editingEvent, ...updatedEvent } : event\n        ));\n        setEditingEvent(null);\n        setIsCreating(false);\n        resetForm();\n      } else {\n        alert(`Error updating event: ${data.error || 'Unknown error'}`);\n      }\n    } catch (err) {\n      console.error(\"Update failed:\", err);\n      alert(\"Failed to update event\");\n    }\n  };\n  \n\n  const sortEvents = (sortBy) => {\n    const sortedEvents = [...events].sort((a, b) => {\n      if (sortBy === 'name') {\n        return a.title.localeCompare(b.title);\n      } else if (sortBy === 'date') {\n        return new Date(a.start_time) - new Date(b.start_timea);\n      }\n      return 0;\n    });\n    setEvents(sortedEvents);\n  };\n\n  const resetForm = () => {\n    setStart(new Date());\n    setEnd(new Date());\n    setEventName('');\n    setEventDescription('');\n  };\n\n  if (isLoading) {\n    return <></>;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"card\">\n        {session ? (\n          <>\n            <h2>{session.user.email}</h2>\n            <div className=\"events-section\">\n              <h3>Upcoming Events</h3>\n              <div className=\"events-buttons\">\n                <button onClick={() => sortEvents('name')}>Sort by Name</button>\n                <button onClick={() => sortEvents('date')}>Sort by Date</button>\n                <button onClick={() => {\n                setEditingEvent(null); // 🛠 ieșim din modul de editare\n                resetForm();           // 🧼 resetăm datele din formular\n                setIsCreating(true);   // 🆕 activăm formularul\n              }}>Create Event</button>\n\n              </div>\n              <div className=\"event-list\">\n                {events.map(event => (\n                  <div key={event.id} className=\"event-card\">\n                    <h4>{event.name}</h4>\n                    <p>{event.description}</p>\n                    <p>{new Date(event.start_time).toLocaleString()} - {new Date(event.end_time).toLocaleString()}</p>\n                    <button onClick={() => editEvent(event)}>Edit</button>\n                    <button onClick={() => deleteEvent(event.id)}>Delete</button>\n                  </div>\n                ))}\n              </div>\n            </div>\n            {isCreating && (\n              <div className=\"create-event-form\">\n                <h3>{editingEvent ? \"Edit Event\" : \"Create Event\"}</h3>\n                <p>Start of your event</p>\n                <DateTimePicker onChange={setStart} value={start} />\n                <p>End of your event</p>\n                <DateTimePicker onChange={setEnd} value={end} />\n                <p>Event name</p>\n                <input type=\"text\" value={eventName} onChange={(e) => setEventName(e.target.value)} />\n                <p>Event Description</p>\n                <input type=\"text\" value={eventDescription} onChange={(e) => setEventDescription(e.target.value)} />\n                <p>Attendees (separate emails with commas)</p>\n                <input \n                  type=\"text\" \n                  value={attendeeEmails} \n                  onChange={(e) => setAttendeeEmails(e.target.value)} \n                />\n                <p></p>\n                <button onClick={editingEvent ? updateEvent : createEvent}>\n                  {editingEvent ? \"Update\" : \"Create\"}\n                </button>\n                <button onClick={() => setIsCreating(false)}>Cancel</button>\n              </div>\n            )}\n            <button onClick={signOut}>Sign Out</button>\n          </>\n        ) : (\n          <div>\n            <h2>Welcome!</h2>\n            <p>Please sign in with Google to continue</p>\n            <button onClick={googleSignIn}>Sign In with Google</button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  async function googleSignIn() {\n    const { error } = await supabase.auth.signInWithOAuth({\n      provider: 'google',\n      options: {\n        scopes: 'https://www.googleapis.com/auth/calendar',\n      },\n    });\n  \n    if (error) {\n      alert('Error logging into Google');\n      console.log(error);\n    }\n  }\n  \n  async function signOut() {\n    await supabase.auth.signOut();\n  }\n\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}